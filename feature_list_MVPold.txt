All Teams Equal - college football poll (expandable to other leagues/sports)
https://docs.google.com/spreadsheets/d/1OJikkGLIKFTj9ivCvXdJkyvoEOhVz1ytxQqpu-ouPrg/edit?usp=sharing

Login/Registration
Admin:
 - CRUD: Teams, Conferences, Schedules
 - Designate administrators
User:
 - CRUD: Favorite teams, watch list
 - Optional: enable/disable polling metrics, sorting preferences

User Dashboard:
 - User info
 - RUD favorite team
 - Watched teams
 - Show picks/record
 - Display favorite team logo/colors
Main page
 - Top 25
 - Toughest schedules
 - Optional: change sorting methods
 - Closest/hottest matches this week
Ranking pages:
 - Expanded team rankings
 >> compared w/ other teams
 - Conference/Division/league rankings
Team pages:
 - Team info: record, schedule
 >> imported from CFB Data API
 - Metrics: WORT, MOV, SOS, Predicted schedule
 - Fav/watch teams
Conference pages:
 - Conference info: overall records
 >> imported from CFB Data API
 - Metrics: WORT, MOV, SOS, Predicted schedule
 - Fav/watch teams
Matchup pages:
 - View selected matchups, team comparisions
 - Pick the winner (due by game start)


Required
(1) Log and Reg with validations
(1) User can [create] object to database: favorite team/conference, team watch list
(1) User can [read] or view objects retrieved from database: user data, one-many like, many-many watched relationships (w/ APIs)
(1) User may like, favorite, rsvp etc. [many-to-many]: favorite/watch list
(1) Use of Django Templating engine (loop to render db data, conditional rendering): team data from rankings, sortable
(1) User may [edit] profile or posted data
(1) User may [delete] profile or posted data
(1) Application includes protected route (user must be in session to view)
(1) Application features static content (CSS, images, JS): team logo/colors from API
(1) Created data must be validated (events cannot be in the past, wall posts must include content, no duplicate data, etc): most data would be featured as the events occur (game start/end), and I would like an archive for past years, but the data should be simulated

Bonus
(1) Application is responsive - sortable/expandable
(1) Application is publicly deployed - absolutely
(1) Application features an API - CFB data API